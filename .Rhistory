frac_img == 1 ~ 1,
frac_img == 9 ~ 2,
frac_img == 3 ~ 3,
frac_img == 5 ~ 4,
)) %>%
mutate(alt_frac_ix = case_when(
frac_ix == 1 ~ 2,
frac_ix == 2 ~ 1,
frac_ix == 3 ~ 4,
frac_ix == 4 ~ 3
))
sum(subs$sig_emot == "Yes")/nrow(subs)
median(subs$age)
mean(subs$age)
view(subs)
rstan:::rstudio_stanc("stan_models/arl_pav2.stan")
.2*-.5
v_alpha_draws <- get_draws("prereg_rva2",vars=c("B_V","alpha"))
v_alpha_draws <- get_draws("prereg_rva2",vars=c("B_V","alpha"),model_out_dir=model_out_dir)
prereg_rva2 <- read_fsml("prereg_rva2",model_out_dir=model_out_dir)
prereg_rva2$runtime
x <- rnorm(100)
y <- rnorm(100)
cor(x,y)
cor(x,sigmoid(y))
cor(sigmoid(x),sigmoid(y))
cor(sigmoid(x),y)
logit(.4)
logit(.999)
cor(x,logit(y))
cor(x,y)
cor(sigmoid(x),sigmoid(y))
rstan:::rstudio_stanc("~/projects/RVA/code/stan_models/bv_alpha_cor.stan")
arl_pav2$diagnostics$Rhat
pB_V <- get_draws("arl_pav2",model_out_dir = model_out_dir,vars=c("pB_V_mu"))
pB_A <- get_draws("arl_pav2",model_out_dir = model_out_dir,vars=c("pB_A_mu"))
quantile(pB_A,c(.025,.50,.975))
quantile(pB_V,c(.025,.50,.975))
quantile(pB_A,c(.025,.50,.975))
quantile(pB_V,c(.025,.50,.975))*200
quantile(pB_A,c(.025,.50,.975))
quantile(pB_V,c(.025,.50,.975))*200
quantile(pB_A,c(.025,.50,.975))
quantile(pB_V,c(.025,.50,.975))*200
quantile(pB_A,c(.025,.50,.975))
bv_alpha_cor <- get_draws("bv_alpha_cor2",model_out_dir = model_out_dir,vars=c("bv_alpha_cor2"))
bv_alpha_cor <- get_draws("bv_alpha_cor2",model_out_dir = model_out_dir,vars=c("bv_alpha_cor"))
quantile(bv_alpha_cor,c(.025,.50,.975))
quantile(bv_alpha_cor,c(.025,.50,.95))
quantile(bv_alpha_cor,c(.025,.50,.90))
mean(bv_alpha_cor>0)
mean(bv_alpha_cor < 0)
knitr::opts_chunk$set(echo = TRUE)
options(mc.cores=12)
path_to_project_directory <- "~/projects/RVA_2/"
path_to_s22 <- "~/projects/spring_2022_study/"
path_to_rva <- "~/projects/RVA/"
stan_model_dir<- paste0(path_to_project_directory,"code/stan_models/")
model_out_dir <- paste0(path_to_project_directory,"output/results/stan_model_fits/")
#load custom functions
source(paste0(path_to_s22,"code/functions/fit_stan_model.R"))
source(paste0(path_to_s22,"code/functions/s22_utilities.R"))
source(paste0(path_to_s22,"code/functions/stan_utilities.R"))
source(paste0(path_to_rva,"code/functions/rva_utilities.R"))
source(paste0(path_to_project_directory,"code/functions/rva2_utilities.R"))
library(tidyverse)
library(cmdstanr)
library(bayesplot)
library(abind)
library(sigmoid)
library(posterior)
trials <- read.csv(paste0(path_to_project_directory,"analysis_data/trial_level_data_all_subs_2024-09-06_14_00_57.801362.csv"))
subs <- read.csv(paste0(path_to_project_directory,"analysis_data/sub_level_data_all_subs_2024-09-06_14_00_57.801362.csv"))
sub_hard_fail <- subs %>% filter(att_checks_passed < 3 |
answers_incorrect > 2 |
sd_valrat < .05 |
sd_probrat < .05 |
valrat_skipped_percent > .15 |
probrat_skipped_percent > .15 |
trials_completed < 80)
#count the number of soft QC cutoffs each subject meets
subs$softs <- 0
for(i in 1:nrow(subs)){
subs$softs[i] <- length(which(c(subs$att_checks_passed[i] == 3,subs$answers_incorrect[i] == 2,
subs$sd_valrat[i] < .07, subs$valrat_skipped_percent[i] > .10,
subs$sd_probrat[i] < .07, subs$probrat_skipped_percent[i] > .10)))
}
sub_soft_fail <- filter(subs,softs >= 2) #identify those who meet more than 2 soft cutoffs
subs_to_exclude <- unique(c(sub_hard_fail$id,sub_soft_fail$id)) #get subjects who failed either set of criteria
#clean data
trials <- trials %>% filter(!(id %in% subs_to_exclude))
subs <- subs %>% filter(!(id %in% subs_to_exclude))
length(subs_to_exclude)/(nrow(subs)+length(subs_to_exclude)) #get percent excluded
trials <- add_sub_indices(trials) #add subject indices to the df. These will match the indices used in Stan.
trials <- add_probe_number(trials,newcol="vrat_number",val_col="val_rat") #add valence rating number
trials <- add_probe_number(trials,newcol="prat_number",val_col="prob_rat") #add probability rating number
trials$prev_vrat_cent <- trials$prev_rate - mean(trials$prev_rate,na.rm=T)
trials <- trials %>% mutate(frac_ix = case_when(
frac_img == 1 ~ 1,
frac_img == 9 ~ 2,
frac_img == 3 ~ 3,
frac_img == 5 ~ 4,
)) %>%
mutate(alt_frac_ix = case_when(
frac_ix == 1 ~ 2,
frac_ix == 2 ~ 1,
frac_ix == 3 ~ 4,
frac_ix == 4 ~ 3
))
prereg_rva2 <- read_fsml("prereg_rva2",model_out_dir=model_out_dir)
view(filt_sum(prereg_rva2,"mu | sigma"))
view(filt_sum(prereg_rva2,"mu|sigma"))
view(filt_sum(prereg_rva2,"(mu|sigma)"))
view(filt_sum(prereg_rva2,"mu"))
view(filt_sum(prereg_rva2$sum,"mu|sigma"))
knitr::opts_chunk$set(echo = TRUE)
options(mc.cores=12)
path_to_project_directory <- "~/projects/RVA_2/"
path_to_s22 <- "~/projects/spring_2022_study/"
path_to_rva <- "~/projects/RVA/"
stan_model_dir<- paste0(path_to_project_directory,"code/stan_models/")
model_out_dir <- paste0(path_to_project_directory,"output/results/stan_model_fits/")
#load custom functions
source(paste0(path_to_s22,"code/functions/fit_stan_model.R"))
source(paste0(path_to_s22,"code/functions/s22_utilities.R"))
source(paste0(path_to_s22,"code/functions/stan_utilities.R"))
source(paste0(path_to_rva,"code/functions/rva_utilities.R"))
source(paste0(path_to_project_directory,"code/functions/rva2_utilities.R"))
library(tidyverse)
library(cmdstanr)
library(bayesplot)
library(abind)
library(sigmoid)
library(posterior)
trials <- read.csv(paste0(path_to_project_directory,"analysis_data/trial_level_data_all_subs_2024-09-06_14_00_57.801362.csv"))
subs <- read.csv(paste0(path_to_project_directory,"analysis_data/sub_level_data_all_subs_2024-09-06_14_00_57.801362.csv"))
sub_hard_fail <- subs %>% filter(att_checks_passed < 3 |
answers_incorrect > 2 |
sd_valrat < .05 |
sd_probrat < .05 |
valrat_skipped_percent > .15 |
probrat_skipped_percent > .15 |
trials_completed < 80)
#count the number of soft QC cutoffs each subject meets
subs$softs <- 0
for(i in 1:nrow(subs)){
subs$softs[i] <- length(which(c(subs$att_checks_passed[i] == 3,subs$answers_incorrect[i] == 2,
subs$sd_valrat[i] < .07, subs$valrat_skipped_percent[i] > .10,
subs$sd_probrat[i] < .07, subs$probrat_skipped_percent[i] > .10)))
}
sub_soft_fail <- filter(subs,softs >= 2) #identify those who meet more than 2 soft cutoffs
subs_to_exclude <- unique(c(sub_hard_fail$id,sub_soft_fail$id)) #get subjects who failed either set of criteria
#clean data
trials <- trials %>% filter(!(id %in% subs_to_exclude))
subs <- subs %>% filter(!(id %in% subs_to_exclude))
length(subs_to_exclude)/(nrow(subs)+length(subs_to_exclude)) #get percent excluded
trials <- add_sub_indices(trials) #add subject indices to the df. These will match the indices used in Stan.
trials <- add_probe_number(trials,newcol="vrat_number",val_col="val_rat") #add valence rating number
trials <- add_probe_number(trials,newcol="prat_number",val_col="prob_rat") #add probability rating number
trials$prev_vrat_cent <- trials$prev_rate - mean(trials$prev_rate,na.rm=T)
trials <- trials %>% mutate(frac_ix = case_when(
frac_img == 1 ~ 1,
frac_img == 9 ~ 2,
frac_img == 3 ~ 3,
frac_img == 5 ~ 4,
)) %>%
mutate(alt_frac_ix = case_when(
frac_ix == 1 ~ 2,
frac_ix == 2 ~ 1,
frac_ix == 3 ~ 4,
frac_ix == 4 ~ 3
))
raw_effs <- get_draws("v_resid2",vars=c("B_V_r_mu","B_alt_r_mu","B_V_mu","B_alt_mu","B_rew_mu"),model_out_dir=model_out_dir)
raw_eff_intervals <- create_interval_plot(arr = vr_draws, names = c("B_alt_r_mu","B_V_r_mu","B_alt_mu","B_V_mu","B_rew_mu"),
color_mapping = c("B_V_r_mu" = "#414141",
"B_V_mu" = "#414141",
"B_rew_mu" = "#414141",
"B_alt_mu" = "#414141",
"B_alt_r_mu" = "#414141",
"B_V_r_mu_med" = "black",
"B_V_mu_med" = "black",
"B_rew_mu_med" = "black",
"B_alt_mu" = "black",
"B_alt_r_mu" = "black")
xmin = 0, xmax = .035,
raw_eff_intervals <- create_interval_plot(arr = vr_draws, names = c("B_alt_r_mu","B_V_r_mu","B_alt_mu","B_V_mu","B_rew_mu"),
color_mapping = c("B_V_r_mu" = "#414141",
"B_V_mu" = "#414141",
"B_rew_mu" = "#414141",
"B_alt_mu" = "#414141",
"B_alt_r_mu" = "#414141",
"B_V_r_mu_med" = "black",
"B_V_mu_med" = "black",
"B_rew_mu_med" = "black",
"B_alt_mu" = "black",
"B_alt_r_mu" = "black"),
xmin = 0, xmax = .035,
percentiles = c(0.025,.25,.50,.75,.975),
dot_size = 3,
scale = .47) +
theme(panel.grid.major.x = element_line(color = "#DCDCDC", size = .47),
panel.background = element_rect(fill = "white", color = NA),
#axis.text.x = element_blank(),
axis.text.y=element_blank())
raw_eff_intervals <- create_interval_plot(arr = raw_effs, names = c("B_alt_r_mu","B_V_r_mu","B_alt_mu","B_V_mu","B_rew_mu"),
color_mapping = c("B_V_r_mu" = "#414141",
"B_V_mu" = "#414141",
"B_rew_mu" = "#414141",
"B_alt_mu" = "#414141",
"B_alt_r_mu" = "#414141",
"B_V_r_mu_med" = "black",
"B_V_mu_med" = "black",
"B_rew_mu_med" = "black",
"B_alt_mu" = "black",
"B_alt_r_mu" = "black"),
xmin = 0, xmax = .035,
percentiles = c(0.025,.25,.50,.75,.975),
dot_size = 3,
scale = .47) +
theme(panel.grid.major.x = element_line(color = "#DCDCDC", size = .47),
panel.background = element_rect(fill = "white", color = NA),
#axis.text.x = element_blank(),
axis.text.y=element_blank())
ggsave("/Users/dp/Documents/conferences/SAS_2025/figures/vr_eff_intervals_s2.pdf",raw_eff_intervals,width=4,height=3.33)
raw_eff_intervals <- create_interval_plot(arr = raw_effs, names = c("B_alt_r_mu","B_V_r_mu","B_alt_mu","B_V_mu","B_rew_mu"),
color_mapping = c("B_V_r_mu" = "#414141",
"B_V_mu" = "#414141",
"B_rew_mu" = "#414141",
"B_alt_mu" = "#414141",
"B_alt_r_mu" = "#414141",
"B_V_r_mu_med" = "black",
"B_V_mu_med" = "black",
"B_rew_mu_med" = "black",
"B_alt_mu" = "black",
"B_alt_r_mu" = "black"),
xmin = -.005, xmax = .035,
percentiles = c(0.025,.25,.50,.75,.975),
dot_size = 3,
scale = .47) +
theme(panel.grid.major.x = element_line(color = "#DCDCDC", size = .47),
panel.background = element_rect(fill = "white", color = NA),
#axis.text.x = element_blank(),
axis.text.y=element_blank())
ggsave("/Users/dp/Documents/conferences/SAS_2025/figures/vr_eff_intervals_s2.pdf",raw_eff_intervals,width=4,height=3.33)
raw_eff_intervals <- create_interval_plot(arr = raw_effs, names = c("B_alt_r_mu","B_V_r_mu","B_alt_mu","B_V_mu","B_rew_mu"),
color_mapping = c("B_V_r_mu" = "#414141",
"B_V_mu" = "#414141",
"B_rew_mu" = "#414141",
"B_alt_mu" = "#414141",
"B_alt_r_mu" = "#414141",
"B_V_r_mu_med" = "black",
"B_V_mu_med" = "black",
"B_rew_mu_med" = "black",
"B_alt_mu_med" = "black",
"B_alt_r_mu_med" = "black"),
xmin = -.005, xmax = .035,
percentiles = c(0.025,.25,.50,.75,.975),
dot_size = 3,
scale = .47) +
theme(panel.grid.major.x = element_line(color = "#DCDCDC", size = .47),
panel.background = element_rect(fill = "white", color = NA),
#axis.text.x = element_blank(),
axis.text.y=element_blank())
ggsave("/Users/dp/Documents/conferences/SAS_2025/figures/vr_eff_intervals_s2.pdf",raw_eff_intervals,width=4,height=3.33)
raw_eff_intervals <- create_interval_plot(arr = raw_effs, names = c("B_alt_r_mu","B_V_r_mu","B_alt_mu","B_V_mu","B_rew_mu"),
color_mapping = c("B_V_r_mu" = "#414141",
"B_V_mu" = "#414141",
"B_rew_mu" = "#414141",
"B_alt_mu" = "#414141",
"B_alt_r_mu" = "#414141",
"B_V_r_mu_med" = "black",
"B_V_mu_med" = "black",
"B_rew_mu_med" = "black",
"B_alt_mu_med" = "black",
"B_alt_r_mu_med" = "black"),
xmin = -.005, xmax = .035,
percentiles = c(0.025,.25,.50,.75,.975),
dot_size = 3,
scale = .47) +
theme(panel.grid.major.x = element_line(color = "#DCDCDC", size = .47),
panel.background = element_rect(fill = "white", color = NA),
#axis.text.x = element_blank(),
axis.text.y=element_blank())
ggsave("/Users/dp/Documents/conferences/SAS_2025/figures/vr_eff_intervals_s2.pdf",raw_eff_intervals,width=4,height=3)
mean(raw_effs[,,"B_V_mu"] > raw_effs[,,"B_V_alt_mu"])
mean(raw_effs[,,"B_V_mu"] > raw_effs[,,"B_alt_mu"])
mean(raw_effs[,,"B_V_r_mu"] > raw_effs[,,"B_alt_r_mu"])
mean(raw_effs[,,"B_V_mu"] > raw_effs[,,"B_alt_mu"])
source("~/projects/spring_2022_study/code/functions/stan_utilities.R")
knitr::opts_chunk$set(echo = TRUE)
options(mc.cores=12)
path_to_project_directory <- "~/projects/RVA_3/"
path_to_s22 <- "~/projects/spring_2022_study/"
path_to_rva <- "~/projects/RVA/"
stan_model_dir<- paste0(path_to_project_directory,"code/stan_models/")
model_out_dir <- paste0(path_to_project_directory,"output/results/stan_model_fits/")
model_diags_dir <- paste0(path_to_project_directory,"output/diagnostics/")
#load custom functions
source(paste0(path_to_s22,"code/functions/fit_stan_model.R"))
source(paste0(path_to_s22,"code/functions/s22_utilities.R"))
source(paste0(path_to_s22,"code/functions/stan_utilities.R"))
source(paste0(path_to_rva,"code/functions/rva_utilities.R"))
source(paste0(path_to_project_directory,"code/functions/rva3_utilities.R"))
library(tidyverse)
library(cmdstanr)
library(bayesplot)
library(abind)
library(sigmoid)
library(posterior)
library(bayestestR)
prob_pred_fcv <- get_draws("forget_combined_vresid",model_out_dir=model_out_dir,vars=c("prob_pred"))
source("~/projects/spring_2022_study/code/functions/stan_utilities.R")
knitr::opts_chunk$set(echo = TRUE)
options(mc.cores=12)
path_to_project_directory <- "~/projects/RVA_3/"
path_to_s22 <- "~/projects/spring_2022_study/"
path_to_rva <- "~/projects/RVA/"
stan_model_dir<- paste0(path_to_project_directory,"code/stan_models/")
model_out_dir <- paste0(path_to_project_directory,"output/results/stan_model_fits/")
model_diags_dir <- paste0(path_to_project_directory,"output/diagnostics/")
#load custom functions
source(paste0(path_to_s22,"code/functions/fit_stan_model.R"))
source(paste0(path_to_s22,"code/functions/s22_utilities.R"))
source(paste0(path_to_s22,"code/functions/stan_utilities.R"))
source(paste0(path_to_rva,"code/functions/rva_utilities.R"))
source(paste0(path_to_project_directory,"code/functions/rva3_utilities.R"))
library(tidyverse)
library(cmdstanr)
library(bayesplot)
library(abind)
library(sigmoid)
library(posterior)
library(bayestestR)
trials <- read.csv(paste0(path_to_project_directory,"analysis_data/trial_level_data_all_subs_2025-03-06_19_00_16.812019.csv"))
subs <- read.csv(paste0(path_to_project_directory,"analysis_data/sub_level_data_all_subs_2025-03-06_19_00_16.812019.csv"))
sub_hard_fail <- subs %>% filter(att_checks_passed < 3 |
answers_incorrect > 3 |
sd_valrat < .04 |
sd_probrat < .05 |
valrat_skipped_percent > .15 |
probrat_skipped_percent > .15 |
trials_completed < 96)
#count the number of soft QC cutoffs each subject meets
subs$softs <- 0
for(i in 1:nrow(subs)){
subs$softs[i] <- length(which(c(subs$att_checks_passed[i] == 3,subs$answers_incorrect[i] == 3,
subs$valrat_skipped_percent[i] > .10,
subs$sd_probrat[i] < .07, subs$probrat_skipped_percent[i] > .10)))
}
sub_soft_fail <- filter(subs,softs >= 2) #identify those who meet more than 2 soft cutoffs
subs_to_exclude <- unique(c(sub_hard_fail$id,sub_soft_fail$id)) #get subjects who failed either set of criteria
#clean data
trials <- trials %>% filter(!(id %in% subs_to_exclude))
subs <- subs %>% filter(!(id %in% subs_to_exclude))
length(subs_to_exclude)/(nrow(subs)+length(subs_to_exclude)) #get percent excluded
trials <- add_sub_indices(trials) #add subject indices to the df. These will match the indices used in Stan.
trials <- add_probe_number(trials,newcol="vrat_number",val_col="val_rat") #add valence rating number
trials <- add_probe_number(trials,newcol="prat_number",val_col="prob_rat") #add probability rating number
# Create mean-centered block and trial numbers
trials <- mutate(trials, bl_cent = block - mean(block), tr_cent = trial_blk - mean(trial_blk),
tr_sub_cent = trial_sub - mean(trial_sub))
# Add fractal indexes
trials <- trials %>% mutate(frac_ix = case_when(
frac_img == 1 ~ 1,
frac_img == 9 ~ 2,
frac_img == 3 ~ 3,
frac_img == 5 ~ 4,
)) %>%
mutate(alt_frac_ix = case_when(
frac_ix == 1 ~ 2,
frac_ix == 2 ~ 1,
frac_ix == 3 ~ 4,
frac_ix == 4 ~ 3
))
prob_pred_fcv <- get_draws("forget_combined_vresid",model_out_dir=model_out_dir,vars=c("prob_pred"))
prob_sigma_fcv <- get_draws("forget_combined_vresid",model_out_dir=model_out_dir,vars=c("prob_sigma"))
prob_resid_var_fcv <- get_trunc_norm_var_3darray(prob_pred_fcv,prob_sigma_fcv,0,1)
prob_rsq_fcv <- mcmc_rsq(prob_pred_fcv,prob_resid_var_fcv,sd=FALSE,print_plot=FALSE)
cat(paste0("Probability ratings r-sq: ",prob_rsq_fcv$sum$mean,"\n\n"))
source("~/projects/spring_2022_study/code/functions/stan_utilities.R")
source("~/projects/spring_2022_study/code/functions/stan_utilities.R")
source("~/projects/spring_2022_study/code/functions/stan_utilities.R")
source("~/projects/spring_2022_study/code/functions/stan_utilities.R")
knitr::opts_chunk$set(echo = TRUE)
options(mc.cores=12)
path_to_project_directory <- "~/projects/RVA_3/"
path_to_s22 <- "~/projects/spring_2022_study/"
path_to_rva <- "~/projects/RVA/"
stan_model_dir<- paste0(path_to_project_directory,"code/stan_models/")
model_out_dir <- paste0(path_to_project_directory,"output/results/stan_model_fits/")
model_diags_dir <- paste0(path_to_project_directory,"output/diagnostics/")
#load custom functions
source(paste0(path_to_s22,"code/functions/fit_stan_model.R"))
source(paste0(path_to_s22,"code/functions/s22_utilities.R"))
source(paste0(path_to_s22,"code/functions/stan_utilities.R"))
source(paste0(path_to_rva,"code/functions/rva_utilities.R"))
source(paste0(path_to_project_directory,"code/functions/rva3_utilities.R"))
library(tidyverse)
library(cmdstanr)
library(bayesplot)
library(abind)
library(sigmoid)
library(posterior)
library(bayestestR)
trials <- read.csv(paste0(path_to_project_directory,"analysis_data/trial_level_data_all_subs_2025-03-06_19_00_16.812019.csv"))
subs <- read.csv(paste0(path_to_project_directory,"analysis_data/sub_level_data_all_subs_2025-03-06_19_00_16.812019.csv"))
sub_hard_fail <- subs %>% filter(att_checks_passed < 3 |
answers_incorrect > 3 |
sd_valrat < .04 |
sd_probrat < .05 |
valrat_skipped_percent > .15 |
probrat_skipped_percent > .15 |
trials_completed < 96)
#count the number of soft QC cutoffs each subject meets
subs$softs <- 0
for(i in 1:nrow(subs)){
subs$softs[i] <- length(which(c(subs$att_checks_passed[i] == 3,subs$answers_incorrect[i] == 3,
subs$valrat_skipped_percent[i] > .10,
subs$sd_probrat[i] < .07, subs$probrat_skipped_percent[i] > .10)))
}
sub_soft_fail <- filter(subs,softs >= 2) #identify those who meet more than 2 soft cutoffs
subs_to_exclude <- unique(c(sub_hard_fail$id,sub_soft_fail$id)) #get subjects who failed either set of criteria
#clean data
trials <- trials %>% filter(!(id %in% subs_to_exclude))
subs <- subs %>% filter(!(id %in% subs_to_exclude))
length(subs_to_exclude)/(nrow(subs)+length(subs_to_exclude)) #get percent excluded
trials <- add_sub_indices(trials) #add subject indices to the df. These will match the indices used in Stan.
trials <- add_probe_number(trials,newcol="vrat_number",val_col="val_rat") #add valence rating number
trials <- add_probe_number(trials,newcol="prat_number",val_col="prob_rat") #add probability rating number
# Create mean-centered block and trial numbers
trials <- mutate(trials, bl_cent = block - mean(block), tr_cent = trial_blk - mean(trial_blk),
tr_sub_cent = trial_sub - mean(trial_sub))
# Add fractal indexes
trials <- trials %>% mutate(frac_ix = case_when(
frac_img == 1 ~ 1,
frac_img == 9 ~ 2,
frac_img == 3 ~ 3,
frac_img == 5 ~ 4,
)) %>%
mutate(alt_frac_ix = case_when(
frac_ix == 1 ~ 2,
frac_ix == 2 ~ 1,
frac_ix == 3 ~ 4,
frac_ix == 4 ~ 3
))
val_pred_fcv <- get_draws("forget_combined_vresid",model_out_dir=model_out_dir,vars=c("val_pred"))
val_sigma_fcv <- get_draws("forget_combined_vresid",model_out_dir=model_out_dir,vars=c("val_sigma_ss"))
val_resid_var_fcv <- get_trunc_norm_var_3darray(val_pred_fcv,val_sigma_fcv,0,1)
val_rsq_fcv <- mcmc_rsq(val_pred_fcv,val_resid_var_fcv,sd=FALSE,print_plot=FALSE)
cat(paste0("Valence ratings r-sq: ",val_rsq_fcv$sum$mean))
knitr::opts_chunk$set(echo = TRUE)
options(mc.cores=12)
path_to_project_directory <- "~/projects/RVA/"
path_to_s22 <- "~/projects/spring_2022_study/"
stan_model_dir<- paste0(path_to_project_directory,"code/stan_models/")
model_out_dir <- paste0(path_to_project_directory,"output/results/stan_model_fits/")
#load custom functions
source(paste0(path_to_s22,"code/functions/fit_stan_model.R"))
source(paste0(path_to_s22,"code/functions/s22_utilities.R"))
source(paste0(path_to_s22,"code/functions/stan_utilities.R"))
source(paste0(path_to_project_directory,"code/functions/rva_utilities.R"))
library(tidyverse)
library(cmdstanr)
library(bayesplot)
library(abind)
library(posterior)
library(sigmoid)
trials <- read.csv(paste0(path_to_project_directory,"analysis_data/trial_level_data_all_subs_2024-04-23_14_16_47.570477.csv"))
subs <- read.csv(paste0(path_to_project_directory,"analysis_data/sub_level_data_all_subs_2024-04-23_14_16_47.570477.csv"))
sub_hard_fail <- subs %>% filter(att_checks_passed < 2 |
answers_incorrect > 2 |
sd_valrat < .05 |
sd_probrat < .05 |
valrat_skipped_percent > .15 |
probrat_skipped_percent > .15 |
trials_completed < 84)
#count the number of soft QC cutoffs each subject meets
subs$softs <- 0
for(i in 1:nrow(subs)){
subs$softs[i] <- length(which(c(subs$att_checks_passed[i] == 2,subs$answers_incorrect[i] == 2,
subs$sd_valrat[i] < .10, subs$valrat_skipped_percent[i] > .10,
subs$sd_probrat[i] < .07, subs$probrat_skipped_percent[i] > .10)))
}
sub_soft_fail <- filter(subs,softs >= 2) #identify those who meet more than 2 soft cutoffs
subs_to_exclude <- unique(c(sub_hard_fail$id,sub_soft_fail$id)) #get subjects who failed either set of criteria
#clean data
trials <- trials %>% filter(!(id %in% subs_to_exclude))
subs <- subs %>% filter(!(id %in% subs_to_exclude))
length(subs_to_exclude)/(nrow(subs)+length(subs_to_exclude)) #get percent excluded
trials <- add_sub_indices(trials) #add subject indices to the df. These will match the indices used in Stan.
trials <- add_probe_number(trials,newcol="vrat_number",val_col="val_rat") #add valence rating number
trials <- add_probe_number(trials,newcol="prat_number",val_col="prob_rat") #add probability rating number
trials$prev_vrat_cent <- trials$prev_rate - mean(trials$prev_rate,na.rm=T)
get_ci_pd(model_name="v_resid",var_name="B_rew_mu",model_out_dir=model_out_dir,scale=100)
get_ci_pd(model_name="v_resid",var_name="B_rew_mu",model_out_dir=model_out_dir,scale=100)
get_ci_pd(model_name="v_resid",var_name="B_rew_mu",model_out_dir=model_out_dir,scale=200)
get_ci_pd(model_name="v_resid",var_name="B_V_mu",model_out_dir=model_out_dir,scale=200)
get_ci_pd(model_name="v_resid",var_name="B_Vr_mu",model_out_dir=model_out_dir,scale=200)
get_ci_pd(model_name="v_resid",diff_vars=c("B_rew_mu","B_V_mu"),model_out_dir=model_out_dir,scale=200)
get_ci_pd(model_name="v_resid",diff_vars=c("B_V_mu","B_Vr_mu"),model_out_dir=model_out_dir,scale=200)
v_resid <- read_fsml("v_resid",model_out_dir=model_out_dir)
# Get info on the posterior distribution for all relevant parameters
mu_table <- select(filt_sum(v_resid$sum,"mu"),variable,median,q5,q95)
mu_table[2,3,4] <- as.numeric(mu_table[2,3,4])
mu_table[1,2:4] <- sigmoid(mu_table[1,2:4]) # Transform learning rate to its original scale
mu_table[c(3:5),2:4] <- mu_table[c(3:5),2:4]*200 # Multiply certiain effects by 100, to be more readable
# and in line with how you reported the effects
mu_table[,c("median","q5","q95")] <- round(mu_table[,c("median","q5","q95")],2)
#write.csv(mu_table,paste0(fig_dir,"params_tab_s1.csv")) #this CSV will be converted into a figure
write.csv(mu_table,"~/Documents/manuscripts/rva/figures_tables/param_tabs/s1/params_tab_s1.csv")
#write.csv(mu_table,paste0(fig_dir,"params_tab_s1.csv")) #this CSV will be converted into a figure
write.csv(mu_table,"~/Documents/manuscripts/rva/figures_tables/param_tabs/params_tab_s1.csv")
