dimnames(vec_ws_norm_org_prereg)[[3]] <- c("rew","rpe","mm","resid") #name meaningfully
create_interval_plot(arr = vec_ws_norm_org_prereg, names = c("resid","mm","rpe","rew"), xmin = -.012, xmax = 1)
create_interval_plot(arr = prereg_eff, names = c("B_alt_mu","B_V_mu","B_rew_mu"), xmin = 0, xmax = .015)
create_interval_plot(arr = prereg_eff, names = c("B_alt_mu","B_V_mu","B_rew_mu"), xmin = -0.02, xmax = .03)
create_interval_plot(arr = prereg_eff, names = c("B_alt_mu","B_V_mu","B_rew_mu"), xmin = -0.02, xmax = .04)
v_draws <- get_draws("prereg_rva2",model_out_dir=model_out_dir,vars=c("B_V_mu"))
alt_draws <- get_draws("prereg_rva2",model_out_dir=model_out_dir,vars=c("B_alt_mu"))
mean(v_draws > alt_draws)
source("~/projects/spring_2022_study/code/functions/s22_utilities.R", echo=TRUE)
create_interval_plot(arr = prereg_eff, names = c("B_alt_mu","B_V_mu","B_rew_mu"), xmin = -0.02, xmax = .04)
source("~/projects/spring_2022_study/code/functions/s22_utilities.R", echo=TRUE)
create_interval_plot(arr = prereg_eff, names = c("B_alt_mu","B_V_mu","B_rew_mu"), xmin = -0.02, xmax = .04)
create_interval_plot(arr = vec_ws_norm_org_prereg, names = c("resid","mm","rpe","rew"), xmin = -.012, xmax = 1)
source("~/projects/spring_2022_study/code/functions/s22_utilities.R", echo=TRUE)
head(vec_ws_norm_org_prereg)
head(prereg_eff)
prereg$diagnostics
prereg$diagnostics
view(prereg$diagnostics$ESS)
set.seed(6)
rew <- c(1,0,0)
rpe <- c(0.5,-0.5,0)
mm <- c(0,0.5,0.5)
dvec_mat <- cbind(rew,rpe,mm) #turn into matrix
prereg_eff <- get_draws("prereg_rva2",model_out_dir=model_out_dir,vars=c("B_rew_mu","B_V_mu","B_alt_mu"))
vec_ws_prereg <- apply(prereg_eff,c(1,2),vec_optim,dvec=dvec_mat,init_pars=c(0,0,0)) #get vector weights
vec_ws_prereg_org <- aperm(vec_ws_prereg,c(2,3,1)) #rearrange dimensions
dimnames(vec_ws_prereg_org)[[3]] <- c("rew","rpe","mm") #name appropriately
create_interval_plot(vec_ws_prereg_org,xmin = -.012, xmax = 1)
create_interval_plot(vec_ws_prereg_org,names = c("rew","rpe","mm")xmin = -.012, xmax = 1)
create_interval_plot(vec_ws_prereg_org,names = c("mm","rpe","rew"),xmin = -.012, xmax = 1)
create_interval_plot(vec_ws_prereg_org,names = c("mm","rpe","rew"),xmin = -.012, xmax = .1)
view(prereg$sum)
view(filt_sum(prereg$sum,"mu"))
mn_data_prereg <- apply(prereg_eff,c(1,2),function(x) sum(abs(x))) #get the manhattan norms for each data vector by summing the absolute values
comb_array_prereg <- abind(vec_ws_prereg_org,mn_data_prereg,along=3) #staple mn_data to the back of the third dimension of the vector weight array
vec_ws_norm_prereg <- apply(comb_array_prereg,c(1,2),get_ports) #get portions of relationship accounted for
vec_ws_norm_org_prereg <- aperm(vec_ws_norm_prereg,c(2,3,1))
dimnames(vec_ws_norm_org_prereg)[[3]] <- c("rew","rpe","mm","resid") #name meaningfully
create_interval_plot(arr = vec_ws_norm_org_prereg, names = c("resid","mm","rpe","rew"), xmin = -.012, xmax = 1)
head(vec_ws_norm_org_prereg)
vec_ws_norm_org_prereg[,,4] > 0
vec_ws_norm_org_prereg[,,3] > 0
vec_ws_norm_org_prereg[,,2] > 0
mean(vec_ws_norm_org_prereg[,,2] == 0)
vp_prereg <- get_draws("prereg_rva2",model_out_dir=model_out_dir,vars=c("val_pred"))
vss_prereg <- get_draws("prereg_rva2",model_out_dir=model_out_dir,vars=c("val_sigma_sigma"))
vs_prereg <- apply(vss_prereg,c(1,2,3),half_normal_mean)
val_rsq_prereg <- mcmc_rsq(vp_prereg,vs_prereg,print_plot=FALSE)
summarise_draws?
?summarise_draws
library(posterior)
val_rsq_prereg <- mcmc_rsq(vp_prereg,vs_prereg,print_plot=FALSE)
val_rsq_prereg$sum[['median']]
pp_prereg <- get_draws("prereg_rva2",model_out_dir=model_out_dir,vars=c("prob_pred"))
ps_prereg <- get_draws("prereg_rva2",model_out_dir=model_out_dir,vars=c("prob_sigma"))
prob_rsq_prereg <- mcmc_rsq(pp_prereg,ps_prereg,print_plot=FALSE)
prob_rsq_prereg$sum['median']
pp_prereg <- get_draws("prereg_rva2",model_out_dir=model_out_dir,vars=c("prob_pred"))
ps_prereg <- get_draws("prereg_rva2",model_out_dir=model_out_dir,vars=c("prob_sigma"))
prob_rsq_prereg <- mcmc_rsq(pp_prereg,ps_prereg,print_plot=FALSE)
prob_rsq_prereg$sum['median']
knitr::opts_chunk$set(echo = TRUE)
options(mc.cores=12)
path_to_project_directory <- "~/projects/RVA_2/"
path_to_s22 <- "~/projects/spring_2022_study/"
path_to_rva <- "~/projects/RVA/"
stan_model_dir<- paste0(path_to_project_directory,"code/stan_models/")
model_out_dir <- paste0(path_to_project_directory,"output/results/stan_model_fits/")
#load custom functions
source(paste0(path_to_s22,"code/functions/fit_stan_model.R"))
source(paste0(path_to_s22,"code/functions/s22_utilities.R"))
source(paste0(path_to_s22,"code/functions/stan_utilities.R"))
source(paste0(path_to_rva,"code/functions/rva_utilities.R"))
source(paste0(path_to_project_directory,"code/functions/rva2_utilities.R"))
library(tidyverse)
library(cmdstanr)
library(bayesplot)
library(abind)
library(sigmoid)
library(posterior)
trials <- read.csv(paste0(path_to_project_directory,"analysis_data/trial_level_data_all_subs_2024-09-06_14_00_57.801362.csv"))
subs <- read.csv(paste0(path_to_project_directory,"analysis_data/sub_level_data_all_subs_2024-09-06_14_00_57.801362.csv"))
sub_hard_fail <- subs %>% filter(att_checks_passed < 3 |
answers_incorrect > 2 |
sd_valrat < .05 |
sd_probrat < .05 |
valrat_skipped_percent > .15 |
probrat_skipped_percent > .15 |
trials_completed < 80)
#count the number of soft QC cutoffs each subject meets
subs$softs <- 0
for(i in 1:nrow(subs)){
subs$softs[i] <- length(which(c(subs$att_checks_passed[i] == 3,subs$answers_incorrect[i] == 2,
subs$sd_valrat[i] < .07, subs$valrat_skipped_percent[i] > .10,
subs$sd_probrat[i] < .07, subs$probrat_skipped_percent[i] > .10)))
}
sub_soft_fail <- filter(subs,softs >= 2) #identify those who meet more than 2 soft cutoffs
subs_to_exclude <- unique(c(sub_hard_fail$id,sub_soft_fail$id)) #get subjects who failed either set of criteria
#clean data
trials <- trials %>% filter(!(id %in% subs_to_exclude))
subs <- subs %>% filter(!(id %in% subs_to_exclude))
length(subs_to_exclude)/(nrow(subs)+length(subs_to_exclude)) #get percent excluded
trials <- add_sub_indices(trials) #add subject indices to the df. These will match the indices used in Stan.
trials <- add_probe_number(trials,newcol="vrat_number",val_col="val_rat") #add valence rating number
trials <- add_probe_number(trials,newcol="prat_number",val_col="prob_rat") #add probability rating number
trials$prev_vrat_cent <- trials$prev_rate - mean(trials$prev_rate,na.rm=T)
trials <- trials %>% mutate(frac_ix = case_when(
frac_img == 1 ~ 1,
frac_img == 9 ~ 2,
frac_img == 3 ~ 3,
frac_img == 5 ~ 4,
)) %>%
mutate(alt_frac_ix = case_when(
frac_ix == 1 ~ 2,
frac_ix == 2 ~ 1,
frac_ix == 3 ~ 4,
frac_ix == 4 ~ 3
))
v_draws <- get_draws("prereg_rva2",model_out_dir=model_out_dir,vars=c("B_V_mu"))
rew_draws <- get_draws("prereg_rva2",model_out_dir=model_out_dir,vars=c("B_rew_mu"))
quantile(v_draws,quantile(.50,.025,.975))
quantile(v_draws,quantile(c(.50,.025,.975)))
quantile(v_draws,quantile(c(.50,.025,.975))
quantile(v_draws,c(.50,.025,.975)
quantile(v_draws,c(.50,.025,.975))
quantile(v_draws,c(.50,.025,.975))*100
knitr::opts_chunk$set(echo = TRUE)
options(mc.cores=12)
path_to_project_directory <- "~/projects/RVA/"
path_to_s22 <- "~/projects/spring_2022_study/"
stan_model_dir<- paste0(path_to_project_directory,"code/stan_models/")
model_out_dir <- paste0(path_to_project_directory,"output/results/stan_model_fits/")
#load custom functions
source(paste0(path_to_s22,"code/functions/fit_stan_model.R"))
source(paste0(path_to_s22,"code/functions/s22_utilities.R"))
source(paste0(path_to_s22,"code/functions/stan_utilities.R"))
source(paste0(path_to_project_directory,"code/functions/rva_utilities.R"))
library(tidyverse)
library(cmdstanr)
library(bayesplot)
library(abind)
trials <- read.csv(paste0(path_to_project_directory,"analysis_data/trial_level_data_all_subs_2024-04-23_14_16_47.570477.csv"))
subs <- read.csv(paste0(path_to_project_directory,"analysis_data/sub_level_data_all_subs_2024-04-23_14_16_47.570477.csv"))
sub_hard_fail <- subs %>% filter(att_checks_passed < 2 |
answers_incorrect > 2 |
sd_valrat < .05 |
sd_probrat < .05 |
valrat_skipped_percent > .15 |
probrat_skipped_percent > .15 |
trials_completed < 84)
#count the number of soft QC cutoffs each subject meets
subs$softs <- 0
for(i in 1:nrow(subs)){
subs$softs[i] <- length(which(c(subs$att_checks_passed[i] == 2,subs$answers_incorrect[i] == 2,
subs$sd_valrat[i] < .10, subs$valrat_skipped_percent[i] > .10,
subs$sd_probrat[i] < .07, subs$probrat_skipped_percent[i] > .10)))
}
sub_soft_fail <- filter(subs,softs >= 2) #identify those who meet more than 2 soft cutoffs
subs_to_exclude <- unique(c(sub_hard_fail$id,sub_soft_fail$id)) #get subjects who failed either set of criteria
#clean data
trials <- trials %>% filter(!(id %in% subs_to_exclude))
subs <- subs %>% filter(!(id %in% subs_to_exclude))
length(subs_to_exclude)/(nrow(subs)+length(subs_to_exclude)) #get percent excluded
trials <- add_sub_indices(trials) #add subject indices to the df. These will match the indices used in Stan.
trials <- add_probe_number(trials,newcol="vrat_number",val_col="val_rat") #add valence rating number
trials <- add_probe_number(trials,newcol="prat_number",val_col="prob_rat") #add probability rating number
trials$prev_vrat_cent <- trials$prev_rate - mean(trials$prev_rate,na.rm=T)
b_rew_draws <- get_draws("base",model_out_dir=model_out_dir,vars=c("B_rew_mu"))
rew_draws <- get_draws("prereg_rva2",model_out_dir=model_out_dir,vars=c("B_rew_mu"))
rew_draws <- get_draws("prereg_rva2",model_out_dir=model_out_dir,vars=c("B_rew_mu"))
quantile(rew_draws,c(.50,.025,.975))*100
b_v_draws <- get_draws("base",model_out_dir=model_out_dir,vars=c("B_V_mu"))
quantile(b_rew_draws,c(.025,.50,.975))
quantile(b_rew_draws,c(.025,.50,.975))*100
quantile(v_draws,c(.50,.025,.975))*100
quantile(b_rew_draws,c(.025,.50,.975))*100
quantile(b_v_draws,c(.025,.50,.975))*100
knitr::opts_chunk$set(echo = TRUE)
options(mc.cores=12)
path_to_project_directory <- "~/projects/RVA_2/"
path_to_s22 <- "~/projects/spring_2022_study/"
path_to_rva <- "~/projects/RVA/"
stan_model_dir<- paste0(path_to_project_directory,"code/stan_models/")
model_out_dir <- paste0(path_to_project_directory,"output/results/stan_model_fits/")
#load custom functions
source(paste0(path_to_s22,"code/functions/fit_stan_model.R"))
source(paste0(path_to_s22,"code/functions/s22_utilities.R"))
source(paste0(path_to_s22,"code/functions/stan_utilities.R"))
source(paste0(path_to_rva,"code/functions/rva_utilities.R"))
source(paste0(path_to_project_directory,"code/functions/rva2_utilities.R"))
library(tidyverse)
library(cmdstanr)
library(bayesplot)
library(abind)
library(sigmoid)
library(posterior)
trials <- read.csv(paste0(path_to_project_directory,"analysis_data/trial_level_data_all_subs_2024-09-06_14_00_57.801362.csv"))
subs <- read.csv(paste0(path_to_project_directory,"analysis_data/sub_level_data_all_subs_2024-09-06_14_00_57.801362.csv"))
sub_hard_fail <- subs %>% filter(att_checks_passed < 3 |
answers_incorrect > 2 |
sd_valrat < .05 |
sd_probrat < .05 |
valrat_skipped_percent > .15 |
probrat_skipped_percent > .15 |
trials_completed < 80)
#count the number of soft QC cutoffs each subject meets
subs$softs <- 0
for(i in 1:nrow(subs)){
subs$softs[i] <- length(which(c(subs$att_checks_passed[i] == 3,subs$answers_incorrect[i] == 2,
subs$sd_valrat[i] < .07, subs$valrat_skipped_percent[i] > .10,
subs$sd_probrat[i] < .07, subs$probrat_skipped_percent[i] > .10)))
}
sub_soft_fail <- filter(subs,softs >= 2) #identify those who meet more than 2 soft cutoffs
subs_to_exclude <- unique(c(sub_hard_fail$id,sub_soft_fail$id)) #get subjects who failed either set of criteria
#clean data
trials <- trials %>% filter(!(id %in% subs_to_exclude))
subs <- subs %>% filter(!(id %in% subs_to_exclude))
length(subs_to_exclude)/(nrow(subs)+length(subs_to_exclude)) #get percent excluded
trials <- add_sub_indices(trials) #add subject indices to the df. These will match the indices used in Stan.
trials <- add_probe_number(trials,newcol="vrat_number",val_col="val_rat") #add valence rating number
trials <- add_probe_number(trials,newcol="prat_number",val_col="prob_rat") #add probability rating number
trials$prev_vrat_cent <- trials$prev_rate - mean(trials$prev_rate,na.rm=T)
trials <- trials %>% mutate(frac_ix = case_when(
frac_img == 1 ~ 1,
frac_img == 9 ~ 2,
frac_img == 3 ~ 3,
frac_img == 5 ~ 4,
)) %>%
mutate(alt_frac_ix = case_when(
frac_ix == 1 ~ 2,
frac_ix == 2 ~ 1,
frac_ix == 3 ~ 4,
frac_ix == 4 ~ 3
))
sum(subs$sig_emot == "Yes")/nrow(subs)
median(subs$age)
mean(subs$age)
view(subs)
rstan:::rstudio_stanc("stan_models/arl_pav2.stan")
.2*-.5
v_alpha_draws <- get_draws("prereg_rva2",vars=c("B_V","alpha"))
v_alpha_draws <- get_draws("prereg_rva2",vars=c("B_V","alpha"),model_out_dir=model_out_dir)
prereg_rva2 <- read_fsml("prereg_rva2",model_out_dir=model_out_dir)
prereg_rva2$runtime
x <- rnorm(100)
y <- rnorm(100)
cor(x,y)
cor(x,sigmoid(y))
cor(sigmoid(x),sigmoid(y))
cor(sigmoid(x),y)
logit(.4)
logit(.999)
cor(x,logit(y))
cor(x,y)
cor(sigmoid(x),sigmoid(y))
rstan:::rstudio_stanc("~/projects/RVA/code/stan_models/bv_alpha_cor.stan")
arl_pav2$diagnostics$Rhat
pB_V <- get_draws("arl_pav2",model_out_dir = model_out_dir,vars=c("pB_V_mu"))
pB_A <- get_draws("arl_pav2",model_out_dir = model_out_dir,vars=c("pB_A_mu"))
quantile(pB_A,c(.025,.50,.975))
quantile(pB_V,c(.025,.50,.975))
quantile(pB_A,c(.025,.50,.975))
quantile(pB_V,c(.025,.50,.975))*200
quantile(pB_A,c(.025,.50,.975))
quantile(pB_V,c(.025,.50,.975))*200
quantile(pB_A,c(.025,.50,.975))
quantile(pB_V,c(.025,.50,.975))*200
quantile(pB_A,c(.025,.50,.975))
bv_alpha_cor <- get_draws("bv_alpha_cor2",model_out_dir = model_out_dir,vars=c("bv_alpha_cor2"))
bv_alpha_cor <- get_draws("bv_alpha_cor2",model_out_dir = model_out_dir,vars=c("bv_alpha_cor"))
quantile(bv_alpha_cor,c(.025,.50,.975))
quantile(bv_alpha_cor,c(.025,.50,.95))
quantile(bv_alpha_cor,c(.025,.50,.90))
mean(bv_alpha_cor>0)
mean(bv_alpha_cor < 0)
knitr::opts_chunk$set(echo = TRUE)
options(mc.cores=12)
path_to_project_directory <- "~/projects/RVA_2/"
path_to_s22 <- "~/projects/spring_2022_study/"
path_to_rva <- "~/projects/RVA/"
stan_model_dir<- paste0(path_to_project_directory,"code/stan_models/")
model_out_dir <- paste0(path_to_project_directory,"output/results/stan_model_fits/")
#load custom functions
source(paste0(path_to_s22,"code/functions/fit_stan_model.R"))
source(paste0(path_to_s22,"code/functions/s22_utilities.R"))
source(paste0(path_to_s22,"code/functions/stan_utilities.R"))
source(paste0(path_to_rva,"code/functions/rva_utilities.R"))
source(paste0(path_to_project_directory,"code/functions/rva2_utilities.R"))
library(tidyverse)
library(cmdstanr)
library(bayesplot)
library(abind)
library(sigmoid)
library(posterior)
trials <- read.csv(paste0(path_to_project_directory,"analysis_data/trial_level_data_all_subs_2024-09-06_14_00_57.801362.csv"))
subs <- read.csv(paste0(path_to_project_directory,"analysis_data/sub_level_data_all_subs_2024-09-06_14_00_57.801362.csv"))
sub_hard_fail <- subs %>% filter(att_checks_passed < 3 |
answers_incorrect > 2 |
sd_valrat < .05 |
sd_probrat < .05 |
valrat_skipped_percent > .15 |
probrat_skipped_percent > .15 |
trials_completed < 80)
#count the number of soft QC cutoffs each subject meets
subs$softs <- 0
for(i in 1:nrow(subs)){
subs$softs[i] <- length(which(c(subs$att_checks_passed[i] == 3,subs$answers_incorrect[i] == 2,
subs$sd_valrat[i] < .07, subs$valrat_skipped_percent[i] > .10,
subs$sd_probrat[i] < .07, subs$probrat_skipped_percent[i] > .10)))
}
sub_soft_fail <- filter(subs,softs >= 2) #identify those who meet more than 2 soft cutoffs
subs_to_exclude <- unique(c(sub_hard_fail$id,sub_soft_fail$id)) #get subjects who failed either set of criteria
#clean data
trials <- trials %>% filter(!(id %in% subs_to_exclude))
subs <- subs %>% filter(!(id %in% subs_to_exclude))
length(subs_to_exclude)/(nrow(subs)+length(subs_to_exclude)) #get percent excluded
trials <- add_sub_indices(trials) #add subject indices to the df. These will match the indices used in Stan.
trials <- add_probe_number(trials,newcol="vrat_number",val_col="val_rat") #add valence rating number
trials <- add_probe_number(trials,newcol="prat_number",val_col="prob_rat") #add probability rating number
trials$prev_vrat_cent <- trials$prev_rate - mean(trials$prev_rate,na.rm=T)
trials <- trials %>% mutate(frac_ix = case_when(
frac_img == 1 ~ 1,
frac_img == 9 ~ 2,
frac_img == 3 ~ 3,
frac_img == 5 ~ 4,
)) %>%
mutate(alt_frac_ix = case_when(
frac_ix == 1 ~ 2,
frac_ix == 2 ~ 1,
frac_ix == 3 ~ 4,
frac_ix == 4 ~ 3
))
prereg_rva2 <- read_fsml("prereg_rva2",model_out_dir=model_out_dir)
view(filt_sum(prereg_rva2,"mu | sigma"))
view(filt_sum(prereg_rva2,"mu|sigma"))
view(filt_sum(prereg_rva2,"(mu|sigma)"))
view(filt_sum(prereg_rva2,"mu"))
view(filt_sum(prereg_rva2$sum,"mu|sigma"))
knitr::opts_chunk$set(echo = TRUE)
options(mc.cores=12)
path_to_project_directory <- "~/projects/RVA_2/"
path_to_s22 <- "~/projects/spring_2022_study/"
path_to_rva <- "~/projects/RVA/"
stan_model_dir<- paste0(path_to_project_directory,"code/stan_models/")
model_out_dir <- paste0(path_to_project_directory,"output/results/stan_model_fits/")
#load custom functions
source(paste0(path_to_s22,"code/functions/fit_stan_model.R"))
source(paste0(path_to_s22,"code/functions/s22_utilities.R"))
source(paste0(path_to_s22,"code/functions/stan_utilities.R"))
source(paste0(path_to_rva,"code/functions/rva_utilities.R"))
source(paste0(path_to_project_directory,"code/functions/rva2_utilities.R"))
library(tidyverse)
library(cmdstanr)
library(bayesplot)
library(abind)
library(sigmoid)
library(posterior)
trials <- read.csv(paste0(path_to_project_directory,"analysis_data/trial_level_data_all_subs_2024-09-06_14_00_57.801362.csv"))
subs <- read.csv(paste0(path_to_project_directory,"analysis_data/sub_level_data_all_subs_2024-09-06_14_00_57.801362.csv"))
sub_hard_fail <- subs %>% filter(att_checks_passed < 3 |
answers_incorrect > 2 |
sd_valrat < .05 |
sd_probrat < .05 |
valrat_skipped_percent > .15 |
probrat_skipped_percent > .15 |
trials_completed < 80)
#count the number of soft QC cutoffs each subject meets
subs$softs <- 0
for(i in 1:nrow(subs)){
subs$softs[i] <- length(which(c(subs$att_checks_passed[i] == 3,subs$answers_incorrect[i] == 2,
subs$sd_valrat[i] < .07, subs$valrat_skipped_percent[i] > .10,
subs$sd_probrat[i] < .07, subs$probrat_skipped_percent[i] > .10)))
}
sub_soft_fail <- filter(subs,softs >= 2) #identify those who meet more than 2 soft cutoffs
subs_to_exclude <- unique(c(sub_hard_fail$id,sub_soft_fail$id)) #get subjects who failed either set of criteria
#clean data
trials <- trials %>% filter(!(id %in% subs_to_exclude))
subs <- subs %>% filter(!(id %in% subs_to_exclude))
length(subs_to_exclude)/(nrow(subs)+length(subs_to_exclude)) #get percent excluded
trials <- add_sub_indices(trials) #add subject indices to the df. These will match the indices used in Stan.
trials <- add_probe_number(trials,newcol="vrat_number",val_col="val_rat") #add valence rating number
trials <- add_probe_number(trials,newcol="prat_number",val_col="prob_rat") #add probability rating number
trials$prev_vrat_cent <- trials$prev_rate - mean(trials$prev_rate,na.rm=T)
trials <- trials %>% mutate(frac_ix = case_when(
frac_img == 1 ~ 1,
frac_img == 9 ~ 2,
frac_img == 3 ~ 3,
frac_img == 5 ~ 4,
)) %>%
mutate(alt_frac_ix = case_when(
frac_ix == 1 ~ 2,
frac_ix == 2 ~ 1,
frac_ix == 3 ~ 4,
frac_ix == 4 ~ 3
))
raw_effs <- get_draws("v_resid2",vars=c("B_V_r_mu","B_alt_r_mu","B_V_mu","B_alt_mu","B_rew_mu"),model_out_dir=model_out_dir)
raw_eff_intervals <- create_interval_plot(arr = vr_draws, names = c("B_alt_r_mu","B_V_r_mu","B_alt_mu","B_V_mu","B_rew_mu"),
color_mapping = c("B_V_r_mu" = "#414141",
"B_V_mu" = "#414141",
"B_rew_mu" = "#414141",
"B_alt_mu" = "#414141",
"B_alt_r_mu" = "#414141",
"B_V_r_mu_med" = "black",
"B_V_mu_med" = "black",
"B_rew_mu_med" = "black",
"B_alt_mu" = "black",
"B_alt_r_mu" = "black")
xmin = 0, xmax = .035,
raw_eff_intervals <- create_interval_plot(arr = vr_draws, names = c("B_alt_r_mu","B_V_r_mu","B_alt_mu","B_V_mu","B_rew_mu"),
color_mapping = c("B_V_r_mu" = "#414141",
"B_V_mu" = "#414141",
"B_rew_mu" = "#414141",
"B_alt_mu" = "#414141",
"B_alt_r_mu" = "#414141",
"B_V_r_mu_med" = "black",
"B_V_mu_med" = "black",
"B_rew_mu_med" = "black",
"B_alt_mu" = "black",
"B_alt_r_mu" = "black"),
xmin = 0, xmax = .035,
percentiles = c(0.025,.25,.50,.75,.975),
dot_size = 3,
scale = .47) +
theme(panel.grid.major.x = element_line(color = "#DCDCDC", size = .47),
panel.background = element_rect(fill = "white", color = NA),
#axis.text.x = element_blank(),
axis.text.y=element_blank())
raw_eff_intervals <- create_interval_plot(arr = raw_effs, names = c("B_alt_r_mu","B_V_r_mu","B_alt_mu","B_V_mu","B_rew_mu"),
color_mapping = c("B_V_r_mu" = "#414141",
"B_V_mu" = "#414141",
"B_rew_mu" = "#414141",
"B_alt_mu" = "#414141",
"B_alt_r_mu" = "#414141",
"B_V_r_mu_med" = "black",
"B_V_mu_med" = "black",
"B_rew_mu_med" = "black",
"B_alt_mu" = "black",
"B_alt_r_mu" = "black"),
xmin = 0, xmax = .035,
percentiles = c(0.025,.25,.50,.75,.975),
dot_size = 3,
scale = .47) +
theme(panel.grid.major.x = element_line(color = "#DCDCDC", size = .47),
panel.background = element_rect(fill = "white", color = NA),
#axis.text.x = element_blank(),
axis.text.y=element_blank())
ggsave("/Users/dp/Documents/conferences/SAS_2025/figures/vr_eff_intervals_s2.pdf",raw_eff_intervals,width=4,height=3.33)
raw_eff_intervals <- create_interval_plot(arr = raw_effs, names = c("B_alt_r_mu","B_V_r_mu","B_alt_mu","B_V_mu","B_rew_mu"),
color_mapping = c("B_V_r_mu" = "#414141",
"B_V_mu" = "#414141",
"B_rew_mu" = "#414141",
"B_alt_mu" = "#414141",
"B_alt_r_mu" = "#414141",
"B_V_r_mu_med" = "black",
"B_V_mu_med" = "black",
"B_rew_mu_med" = "black",
"B_alt_mu" = "black",
"B_alt_r_mu" = "black"),
xmin = -.005, xmax = .035,
percentiles = c(0.025,.25,.50,.75,.975),
dot_size = 3,
scale = .47) +
theme(panel.grid.major.x = element_line(color = "#DCDCDC", size = .47),
panel.background = element_rect(fill = "white", color = NA),
#axis.text.x = element_blank(),
axis.text.y=element_blank())
ggsave("/Users/dp/Documents/conferences/SAS_2025/figures/vr_eff_intervals_s2.pdf",raw_eff_intervals,width=4,height=3.33)
raw_eff_intervals <- create_interval_plot(arr = raw_effs, names = c("B_alt_r_mu","B_V_r_mu","B_alt_mu","B_V_mu","B_rew_mu"),
color_mapping = c("B_V_r_mu" = "#414141",
"B_V_mu" = "#414141",
"B_rew_mu" = "#414141",
"B_alt_mu" = "#414141",
"B_alt_r_mu" = "#414141",
"B_V_r_mu_med" = "black",
"B_V_mu_med" = "black",
"B_rew_mu_med" = "black",
"B_alt_mu_med" = "black",
"B_alt_r_mu_med" = "black"),
xmin = -.005, xmax = .035,
percentiles = c(0.025,.25,.50,.75,.975),
dot_size = 3,
scale = .47) +
theme(panel.grid.major.x = element_line(color = "#DCDCDC", size = .47),
panel.background = element_rect(fill = "white", color = NA),
#axis.text.x = element_blank(),
axis.text.y=element_blank())
ggsave("/Users/dp/Documents/conferences/SAS_2025/figures/vr_eff_intervals_s2.pdf",raw_eff_intervals,width=4,height=3.33)
raw_eff_intervals <- create_interval_plot(arr = raw_effs, names = c("B_alt_r_mu","B_V_r_mu","B_alt_mu","B_V_mu","B_rew_mu"),
color_mapping = c("B_V_r_mu" = "#414141",
"B_V_mu" = "#414141",
"B_rew_mu" = "#414141",
"B_alt_mu" = "#414141",
"B_alt_r_mu" = "#414141",
"B_V_r_mu_med" = "black",
"B_V_mu_med" = "black",
"B_rew_mu_med" = "black",
"B_alt_mu_med" = "black",
"B_alt_r_mu_med" = "black"),
xmin = -.005, xmax = .035,
percentiles = c(0.025,.25,.50,.75,.975),
dot_size = 3,
scale = .47) +
theme(panel.grid.major.x = element_line(color = "#DCDCDC", size = .47),
panel.background = element_rect(fill = "white", color = NA),
#axis.text.x = element_blank(),
axis.text.y=element_blank())
ggsave("/Users/dp/Documents/conferences/SAS_2025/figures/vr_eff_intervals_s2.pdf",raw_eff_intervals,width=4,height=3)
mean(raw_effs[,,"B_V_mu"] > raw_effs[,,"B_V_alt_mu"])
mean(raw_effs[,,"B_V_mu"] > raw_effs[,,"B_alt_mu"])
mean(raw_effs[,,"B_V_r_mu"] > raw_effs[,,"B_alt_r_mu"])
mean(raw_effs[,,"B_V_mu"] > raw_effs[,,"B_alt_mu"])
