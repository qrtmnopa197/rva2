rstan:::rstudio_stanc("v_resid2.stan")
knitr::opts_chunk$set(echo = TRUE)
options(mc.cores=12)
path_to_project_directory <- "~/projects/RVA_2/"
path_to_s22 <- "~/projects/spring_2022_study/"
path_to_rva <- "~/projects/RVA/"
stan_model_dir<- paste0(path_to_project_directory,"code/stan_models/")
model_out_dir <- paste0(path_to_project_directory,"output/results/stan_model_fits/")
#load custom functions
source(paste0(path_to_s22,"code/functions/fit_stan_model.R"))
source(paste0(path_to_s22,"code/functions/s22_utilities.R"))
source(paste0(path_to_s22,"code/functions/stan_utilities.R"))
source(paste0(path_to_rva,"code/functions/rva_utilities.R"))
source(paste0(path_to_project_directory,"code/functions/rva2_utilities.R"))
library(tidyverse)
library(cmdstanr)
library(bayesplot)
library(abind)
library(sigmoid)
library(posterior)
trials <- read.csv(paste0(path_to_project_directory,"analysis_data/trial_level_data_all_subs_2024-09-06_14_00_57.801362.csv"))
subs <- read.csv(paste0(path_to_project_directory,"analysis_data/sub_level_data_all_subs_2024-09-06_14_00_57.801362.csv"))
sub_hard_fail <- subs %>% filter(att_checks_passed < 3 |
answers_incorrect > 2 |
sd_valrat < .05 |
sd_probrat < .05 |
valrat_skipped_percent > .15 |
probrat_skipped_percent > .15 |
trials_completed < 80)
#count the number of soft QC cutoffs each subject meets
subs$softs <- 0
for(i in 1:nrow(subs)){
subs$softs[i] <- length(which(c(subs$att_checks_passed[i] == 3,subs$answers_incorrect[i] == 2,
subs$sd_valrat[i] < .07, subs$valrat_skipped_percent[i] > .10,
subs$sd_probrat[i] < .07, subs$probrat_skipped_percent[i] > .10)))
}
sub_soft_fail <- filter(subs,softs >= 2) #identify those who meet more than 2 soft cutoffs
subs_to_exclude <- unique(c(sub_hard_fail$id,sub_soft_fail$id)) #get subjects who failed either set of criteria
#clean data
trials <- trials %>% filter(!(id %in% subs_to_exclude))
subs <- subs %>% filter(!(id %in% subs_to_exclude))
length(subs_to_exclude)/(nrow(subs)+length(subs_to_exclude)) #get percent excluded
trials <- add_sub_indices(trials) #add subject indices to the df. These will match the indices used in Stan.
trials <- add_probe_number(trials,newcol="vrat_number",val_col="val_rat") #add valence rating number
trials <- add_probe_number(trials,newcol="prat_number",val_col="prob_rat") #add probability rating number
trials$prev_vrat_cent <- trials$prev_rate - mean(trials$prev_rate,na.rm=T)
trials <- trials %>% mutate(frac_ix = case_when(
frac_img == 1 ~ 1,
frac_img == 9 ~ 2,
frac_img == 3 ~ 3,
frac_img == 5 ~ 4,
)) %>%
mutate(alt_frac_ix = case_when(
frac_ix == 1 ~ 2,
frac_ix == 2 ~ 1,
frac_ix == 3 ~ 4,
frac_ix == 4 ~ 3
))
view(filt_sum(v_resid2$sum,"mu"))
B_V_r_mu <- get_draws("v_resid2",vars=c("B_V_r_mu"))
B_V_r_mu <- get_draws("v_resid2",vars=c("B_V_r_mu"))
B_V_r_mu <- get_draws("v_resid2",vars=c("B_V_r_mu"),model_out_dir=model_out_dir)
B_V_r_mu <- get_draws("v_resid2",vars=c("B_V_r_mu"),model_out_dir=model_out_dir)
B_V_alt_r_mu <- get_draws("v_resid2",vars=c("B_V_alt_r_mu"),model_out_dir=model_out_dir)
B_alt_r_mu <- get_draws("v_resid2",vars=c("B_alt_r_mu"),model_out_dir=model_out_dir)
mean(B_V_r_mu>0)
prereg_rva2 <- read_fsml("prereg_rva2",model_out_dir=model_out_dir)
view(filt_sum(prereg_rva2$sum,"mu"))
mean(B_V_r_mu > B_V_alt_r_mu)
mean(B_V_r_mu > B_alt_r_mu)
raw_effs <- get_draws("v_resid2",vars=c("B_V_r_mu","B_alt_r_mu","B_V_mu","B_alt_mu","B_rew_mu"),model_out_dir=model_out_dir)
create_interval_plot(arr = raw_effs, names = c("B_V_r_mu","B_alt_r_mu","B_V_mu","B_alt_mu","B_rew_mu"), xmin = -.012, xmax = 1)
create_interval_plot(arr = raw_effs, names = c("B_V_r_mu","B_alt_r_mu","B_V_mu","B_alt_mu","B_rew_mu"), xmin = -.01, xmax = .1)
create_interval_plot(arr = raw_effs, names = c(,"B_alt_r_mu","B_V_r_mu","B_alt_mu","B_V_mu","B_rew_mu"), xmin = -.01, xmax = .1)
create_interval_plot(arr = raw_effs, names = c("B_alt_r_mu","B_V_r_mu","B_alt_mu","B_V_mu","B_rew_mu"), xmin = -.01, xmax = .1)
raw_effs[,,"B_V_mu"] > raw_effs[,,"B_alt_mu"]
mean(raw_effs[,,"B_V_mu"] > raw_effs[,,"B_alt_mu"])
mean(raw_effs[,,"B_V_mu"] > raw_effs[,,"B_V_r_mu"])
create_interval_plot(arr = raw_effs, names = c("B_alt_r_mu","B_V_r_mu","B_alt_mu","B_V_mu","B_rew_mu"), xmin = -.01, xmax = .04)
create_interval_plot(arr = raw_effs, names = c("B_alt_r_mu","B_V_r_mu","B_alt_mu","B_V_mu","B_rew_mu"), xmin = -.01, xmax = .035)
create_interval_plot(arr = raw_effs, names = c("B_alt_r_mu","B_V_r_mu","B_alt_mu","B_V_mu","B_rew_mu"), xmin = 0, xmax = .035)
create_interval_plot(arr = raw_effs, names = c("B_alt_r_mu","B_V_r_mu","B_alt_mu","B_V_mu","B_rew_mu"), xmin = 0.01, xmax = .035)
create_interval_plot(arr = raw_effs, names = c("B_alt_r_mu","B_V_r_mu","B_alt_mu","B_V_mu","B_rew_mu"), xmin = -0.01, xmax = .035)
create_interval_plot(arr = raw_effs, names = c("B_alt_r_mu","B_V_r_mu","B_alt_mu","B_V_mu","B_rew_mu"), xmin = -0.05, xmax = .035)
create_interval_plot(arr = raw_effs, names = c("B_alt_r_mu","B_V_r_mu","B_alt_mu","B_V_mu","B_rew_mu"), xmin = -0.005, xmax = .035)
knitr::opts_chunk$set(echo = TRUE)
options(mc.cores=12)
path_to_project_directory <- "~/projects/RVA_2/"
path_to_s22 <- "~/projects/spring_2022_study/"
path_to_rva <- "~/projects/RVA/"
stan_model_dir<- paste0(path_to_project_directory,"code/stan_models/")
model_out_dir <- paste0(path_to_project_directory,"output/results/stan_model_fits/")
#load custom functions
source(paste0(path_to_s22,"code/functions/fit_stan_model.R"))
source(paste0(path_to_s22,"code/functions/s22_utilities.R"))
source(paste0(path_to_s22,"code/functions/stan_utilities.R"))
source(paste0(path_to_rva,"code/functions/rva_utilities.R"))
source(paste0(path_to_project_directory,"code/functions/rva2_utilities.R"))
library(tidyverse)
library(cmdstanr)
library(bayesplot)
library(abind)
library(sigmoid)
library(posterior)
trials <- read.csv(paste0(path_to_project_directory,"analysis_data/trial_level_data_all_subs_2024-09-06_14_00_57.801362.csv"))
subs <- read.csv(paste0(path_to_project_directory,"analysis_data/sub_level_data_all_subs_2024-09-06_14_00_57.801362.csv"))
sub_hard_fail <- subs %>% filter(att_checks_passed < 3 |
answers_incorrect > 2 |
sd_valrat < .05 |
sd_probrat < .05 |
valrat_skipped_percent > .15 |
probrat_skipped_percent > .15 |
trials_completed < 80)
#count the number of soft QC cutoffs each subject meets
subs$softs <- 0
for(i in 1:nrow(subs)){
subs$softs[i] <- length(which(c(subs$att_checks_passed[i] == 3,subs$answers_incorrect[i] == 2,
subs$sd_valrat[i] < .07, subs$valrat_skipped_percent[i] > .10,
subs$sd_probrat[i] < .07, subs$probrat_skipped_percent[i] > .10)))
}
sub_soft_fail <- filter(subs,softs >= 2) #identify those who meet more than 2 soft cutoffs
subs_to_exclude <- unique(c(sub_hard_fail$id,sub_soft_fail$id)) #get subjects who failed either set of criteria
#clean data
trials <- trials %>% filter(!(id %in% subs_to_exclude))
subs <- subs %>% filter(!(id %in% subs_to_exclude))
length(subs_to_exclude)/(nrow(subs)+length(subs_to_exclude)) #get percent excluded
nrow(subs)
nrow(subs)+length(subs_to_exclude)
nrow(trials)/102
vp_resid<- get_draws("v_resid2",model_out_dir=model_out_dir,vars=c("val_pred"))
vss_resid <- get_draws("v_resid2",model_out_dir=model_out_dir,vars=c("val_sigma_sigma"))
vs_resid <- apply(vss_resid,c(1,2,3),half_normal_mean)
val_rsq_resid <- mcmc_rsq(vp_resid,vs_resid,print_plot=FALSE)
val_rsq_resid$sum[['median']]
